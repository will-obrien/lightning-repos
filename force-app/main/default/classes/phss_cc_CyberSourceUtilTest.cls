/**
 * Created by dgajwani on 10/2/18.
 */
@isTest
public with sharing class phss_cc_CyberSourceUtilTest {

    private final static String cyberSourceResponseOriginal = '{ "utf8": "✓", "transaction_id": "5372068707346357204006", "signed_field_names": "transaction_id,decision,req_access_key,req_profile_id,req_transaction_uuid,req_transaction_type,req_reference_number,req_amount,req_currency,req_locale,req_payment_method,req_ignore_avs,req_override_custom_receipt_page,req_bill_to_forename,req_bill_to_surname,req_bill_to_email,req_bill_to_address_line1,req_bill_to_address_city,req_bill_to_address_state,req_bill_to_address_country,req_bill_to_address_postal_code,req_card_number,req_card_type,req_card_expiry_date,req_merchant_defined_data1,message,reason_code,auth_avs_code,auth_avs_code_raw,auth_response,auth_amount,auth_code,auth_trans_ref_no,auth_time,request_token,payment_token_instrument_identifier_id,payment_token_instrument_identifier_new,payment_token_instrument_identifier_status,payment_token,signed_field_names,signed_date_time", "signed_date_time": "2018-09-17T17:54:30Z", "signature": "5aPWOgD98fmUVmyEKKxeSPNx4yDyWu0rKSbfI1P3y48=", "request_token": "Ahj/7wSTIzht+uRDhLQmESDdm1cNW7hrKmtoMeS3qpcnbxRioClydvFGK6QHyQIkMmkmXoxXbmQwJyZGcNv1yIcJaEwAxhqG", "req_transaction_uuid": "1537206859128", "req_transaction_type": "authorization,create_payment_token", "req_reference_number": "1537206859129", "req_profile_id": "A462C345-9818-4803-84E6-37794D8B3F81", "req_payment_method": "card", "req_override_custom_receipt_page": "https://arc-phss--transdev1--ccrz.cs52.visual.force.com/apex/ccrz__ccBridge?pagekey=CybersourcePostback", "req_merchant_defined_data1": "0065B00000AY0JzQAL", "req_locale": "en-us", "req_ignore_avs": "true", "req_currency": "USD", "req_card_type": "001", "req_card_number": "xxxxxxxxxxxx1111", "req_card_expiry_date": "12-2019", "req_bill_to_surname": "Test", "req_bill_to_forename": "Test", "req_bill_to_email": "Test@test.com", "req_bill_to_address_state": "IL", "req_bill_to_address_postal_code": "12345", "req_bill_to_address_line1": "3450 N Lake Shore Dr", "req_bill_to_address_country": "US", "req_bill_to_address_city": "Chicago", "req_amount": "1.00", "req_access_key": "2f9eac4dfdfc3bb5917f9dd1c68f381b", "reason_code": "100", "payment_token_instrument_identifier_status": "ACTIVE", "payment_token_instrument_identifier_new": "N", "payment_token_instrument_identifier_id": "7010000000025311111", "payment_token": "7615BB8E161D11BEE05341588E0AF0F1", "pagekey": "CybersourcePostback", "message": "Request was processed successfully.", "decision": "ACCEPT", "auth_trans_ref_no": "73585785JM6AGI7U", "auth_time": "2018-09-17T175430Z", "auth_response": "100", "auth_code": "888888", "auth_avs_code_raw": "I1", "auth_avs_code": "X", "auth_amount": "1.00" }';
    private final static String cyberSourceResponseTampered = '{ "utf8": "✓", "transaction_id": "123", "signed_field_names": "transaction_id,decision,req_access_key,req_profile_id,req_transaction_uuid,req_transaction_type,req_reference_number,req_amount,req_currency,req_locale,req_payment_method,req_ignore_avs,req_override_custom_receipt_page,req_bill_to_forename,req_bill_to_surname,req_bill_to_email,req_bill_to_address_line1,req_bill_to_address_city,req_bill_to_address_state,req_bill_to_address_country,req_bill_to_address_postal_code,req_card_number,req_card_type,req_card_expiry_date,req_merchant_defined_data1,message,reason_code,auth_avs_code,auth_avs_code_raw,auth_response,auth_amount,auth_code,auth_trans_ref_no,auth_time,request_token,payment_token_instrument_identifier_id,payment_token_instrument_identifier_new,payment_token_instrument_identifier_status,payment_token,signed_field_names,signed_date_time", "signed_date_time": "2018-09-17T17:54:30Z", "signature": "5aPWOgD98fmUVmyEKKxeSPNx4yDyWu0rKSbfI1P3y48=", "request_token": "Ahj/7wSTIzht+uRDhLQmESDdm1cNW7hrKmtoMeS3qpcnbxRioClydvFGK6QHyQIkMmkmXoxXbmQwJyZGcNv1yIcJaEwAxhqG", "req_transaction_uuid": "1537206859128", "req_transaction_type": "authorization,create_payment_token", "req_reference_number": "1537206859129", "req_profile_id": "A462C345-9818-4803-84E6-37794D8B3F81", "req_payment_method": "card", "req_override_custom_receipt_page": "https://arc-phss--transdev1--ccrz.cs52.visual.force.com/apex/ccrz__ccBridge?pagekey=CybersourcePostback", "req_merchant_defined_data1": "0065B00000AY0JzQAL", "req_locale": "en-us", "req_ignore_avs": "true", "req_currency": "USD", "req_card_type": "001", "req_card_number": "xxxxxxxxxxxx1111", "req_card_expiry_date": "12-2019", "req_bill_to_surname": "Test", "req_bill_to_forename": "Test", "req_bill_to_email": "Test@test.com", "req_bill_to_address_state": "IL", "req_bill_to_address_postal_code": "12345", "req_bill_to_address_line1": "3450 N Lake Shore Dr", "req_bill_to_address_country": "US", "req_bill_to_address_city": "Chicago", "req_amount": "1.00", "req_access_key": "2f9eac4dfdfc3bb5917f9dd1c68f381b", "reason_code": "100", "payment_token_instrument_identifier_status": "ACTIVE", "payment_token_instrument_identifier_new": "N", "payment_token_instrument_identifier_id": "7010000000025311111", "payment_token": "7615BB8E161D11BEE05341588E0AF0F1", "pagekey": "CybersourcePostback", "message": "Request was processed successfully.", "decision": "ACCEPT", "auth_trans_ref_no": "73585785JM6AGI7U", "auth_time": "2018-09-17T175430Z", "auth_response": "100", "auth_code": "888888", "auth_avs_code_raw": "I1", "auth_avs_code": "X", "auth_amount": "1.00" }';

    public static Opportunity testOpportunity;
    	
    public static ccrz__E_Order__c testOrder;

    public static ccrz__E_TransactionPayment__c testAuthTransactionPayment;
    public static ccrz__E_TransactionPayment__c testCaptureTransactionPayment;

    public static Fulfillment__c testFulfillment;
    
    /**
     * @description Creates the basic testdata.
     */
    public static void setupTestData() {
        Map<String, Object> testData = phss_cc_TestDataFactory.setupAccountAndProducts();
        testOpportunity = phss_cc_TestDataFactory.createInsertTestOpportunity((Account)testData.get(phss_cc_TestDataFactory.TEST_ACCOUNT));
        phss_cc_TestDataFactory.createInsertCartAndCartItems(1,testData,testOpportunity.Id);
        phss_cc_CyberSourceUtil.getCyberSourceConfigSettings(phss_cc_TestDataFactory.TEST_STOREFRONT);
        
        testOrder = new ccrz__E_Order__c(
            NSSCCConnector_SFCC_Order_Number__c = '3114226',
            NSSCCConnector_from_SFCC__c = true,
            ccrz__Account__c = ((Account)testData.get(phss_cc_TestDataFactory.TEST_ACCOUNT)).Id
        );
        insert testOrder;

        testAuthTransactionPayment = new ccrz__E_TransactionPayment__c(
                ccrz__Token__c = phss_cc_TestDataFactory.TEST_AUTH_TXN_PMT_TOKEN,
                ccrz__CCOrder__c = testOrder.Id,
                ccrz__TransactionType__c = phss_cc_TransactionPaymentUtil.AUTH_TRANSACTION_TYPE
        );
        insert testAuthTransactionPayment;

        testCaptureTransactionPayment = new ccrz__E_TransactionPayment__c(
                ccrz__Token__c = 'testToken',
                ccrz__CCOrder__c = testOrder.Id,
                ccrz__SourceTransactionPayment__c = testAuthTransactionPayment.Id,
                ccrz__TransactionType__c = phss_cc_TransactionPaymentUtil.CAPTURE_TRANSACTION_TYPE
        );
        insert testCaptureTransactionPayment;

        testFulfillment = new Fulfillment__c(
            Type__c='Invoice',
            Status__c='Open',
            Order__c = testOrder.Id,
            CC_Transaction_Payment__c= testAuthTransactionPayment.Id
        );
        insert testFulfillment;

    }


    @isTest
    public static void testCyberSourceConfigSettings() {

        setupTestData();

        Test.startTest();
        
        phss_cc_CyberSourceUtil.getCyberSourceConfigSettings(phss_cc_TestDataFactory.TEST_STOREFRONT);
        
        Test.stopTest();

        System.assertEquals(phss_cc_TestDataFactory.TEST_ACCESS_KEY, phss_cc_CyberSourceUtil.ACCESS_KEY);
        System.assertEquals(phss_cc_TestDataFactory.TEST_PROFILE, phss_cc_CyberSourceUtil.PROFILE_ID);
        System.assertEquals(phss_cc_TestDataFactory.TEST_SECRET , phss_cc_CyberSourceUtil.SECRET);
        System.assertEquals(phss_cc_TestDataFactory.TEST_URL_TOKEN_CREATE, phss_cc_CyberSourceUtil.POST_URL);
    }

    @isTest
    public static void testTranslateCardTypes() {

        Map<String, Object> translateCardTypesResult = phss_cc_CyberSourceUtil.translateCardTypes('001,002,003,004');

        System.assertEquals(4,translateCardTypesResult.size());
        System.assertEquals(phss_cc_TestDataFactory.VISA,translateCardTypesResult.get(phss_cc_TestDataFactory.PAYMENT_TYPE_VISA));
        System.assertEquals(phss_cc_TestDataFactory.MASTER_CARD,translateCardTypesResult.get(phss_cc_TestDataFactory.PAYMENT_TYPE_MASTERCARD));
        System.assertEquals(phss_cc_TestDataFactory.AMERICAN_EXPRESS,translateCardTypesResult.get(phss_cc_TestDataFactory.PAYMENT_TYPE_AMERICAN_EXPRESS));
        System.assertEquals(phss_cc_TestDataFactory.DISCOVER,translateCardTypesResult.get(phss_cc_TestDataFactory.PAYMENT_TYPE_DISCOVER));
    }

    @isTest
    public static void testAccountAndCartData() {
		
        setupTestData();

        test.startTest();
        phss_cc_CyberSourceUtil.getAccountAndCartData(testOpportunity.Id);
        test.stopTest();

        System.assertEquals(phss_cc_TestDataFactory.TEST_ACC_FIRSTNAME, phss_cc_CyberSourceUtil.BILLING_CONTACT_FIRST_NAME);
        System.assertEquals(phss_cc_TestDataFactory.TEST_ACC_LASTNAME, phss_cc_CyberSourceUtil.BILLING_CONTACT_LAST_NAME);
        System.assertEquals(phss_cc_TestDataFactory.TEST_EMAIL, phss_cc_CyberSourceUtil.BILLING_CONTACT_EMAIL);
        System.assertEquals(phss_cc_TestDataFactory.TEST_STREET, phss_cc_CyberSourceUtil.BILLING_STREET);
        System.assertEquals(phss_cc_TestDataFactory.TEST_CITY, phss_cc_CyberSourceUtil.BILLING_CITY);
        System.assertEquals(phss_cc_TestDataFactory.TEST_STATE, phss_cc_CyberSourceUtil.BILLING_STATE);
        System.assertEquals(phss_cc_TestDataFactory.TEST_COUNTRY, phss_cc_CyberSourceUtil.BILLING_COUNTRY);
        System.assertEquals(phss_cc_TestDataFactory.TEST_ZIPCODE, phss_cc_CyberSourceUtil.BILLING_POSTAL_CODE);
        System.assertEquals(phss_cc_TestDataFactory.TEST_STOREFRONT, phss_cc_CyberSourceUtil.STOREFRONT);
    }

    @isTest
    public static void testLightningURLToPOSTCyberSourceResponse() {
        String lightningURLResult = phss_cc_CyberSourceUtil.getLightningURLToPOSTCyberSourceResponse();
        //TODO: This is a hack. This will be fixed in Spring 2019.
        String baseURL = 'https://testInstance--c.visual.force.com';
        String lightningURL = baseURL.substring(0, baseURL.indexOf('--c')) + '.lightning.force.com';

        System.assertEquals(lightningURL,lightningURLResult);
    }

    @isTest
    public static void testBuildCyberSourceFormData() {

        setupTestData();

        test.startTest();
        Map<String, Object> buildCyberSourceFormDataResult = phss_cc_CyberSourceUtil.buildCyberSourceFormData(testOpportunity.Id);
        test.stopTest();

        System.assertNotEquals(null,buildCyberSourceFormDataResult);
    }

    @isTest
    public static void testVerifyCyberSourceResponseSignature() {

        setupTestData();

        test.startTest();
        Boolean verifySignatureResultOriginal = phss_cc_CyberSourceUtil.verifyCyberSourceResponseSignature(testOpportunity.Id,cyberSourceResponseOriginal);
        Boolean verifySignatureResultTampered = phss_cc_CyberSourceUtil.verifyCyberSourceResponseSignature(testOpportunity.Id,cyberSourceResponseTampered);
        test.stopTest();

        System.assertEquals(true,verifySignatureResultOriginal);
        System.assertEquals(false,verifySignatureResultTampered);
    }
    
    @isTest static void testBuildCaptureData(){
        
        setupTestData();
        
        String testReferenceNumber = 'testReferenceNumber';
        
        String testPaymentToken = 'testPaymentToken';
        
        test.startTest();
        
        Map<String, Object> dataMap = phss_cc_CyberSourceUtil.buildCaptureData(testPaymentToken, testReferenceNumber, 1);
        
        system.assertEquals(dataMap.get('reference_number'), String.valueOf(testReferenceNumber));
        
        system.assertEquals(dataMap.get('payment_token'), String.valueOf(testPaymentToken));
        
        test.stopTest();
    }
    
    @isTest static void testFetchCart(){
        
        setupTestData();
        
        ccrz__E_Cart__c testCart = new ccrz__E_Cart__c(
            Opportunity__c = testOpportunity.Id,
            ccrz__ActiveCart__c = true,
            ccrz__EncryptedId__c = 'testId1234'
        );
        insert testCart;
        
        system.assertEquals(testCart.Id, phss_cc_CyberSourceUtil.fetchCart(testCart.Id).Id);
    }
    
    @isTest static void testFetchOrder(){
        
        setupTestData();
                
        system.assertEquals(testOrder.Id, phss_cc_CyberSourceUtil.fetchOrder(testOrder.Id).Id);
    }
    
    @isTest static void testFetchTransactionPaymentForToken(){
        
        setupTestData();

        String token = phss_cc_TestDataFactory.TEST_AUTH_TXN_PMT_TOKEN;
        System.assertEquals(testAuthTransactionPayment.Id, phss_cc_CyberSourceUtil.fetchTransactionPaymentForToken(token).Id);
    }
    
    @isTest static void testCapturePayment(){
        
        setupTestData();
        
        ccrz__E_Cart__c testCart = new ccrz__E_Cart__c(
            Opportunity__c = testOpportunity.Id,
            ccrz__ActiveCart__c = true,
            ccrz__EncryptedId__c = 'testId1234'
        );
        insert testCart;
        
        testOrder.ccrz__OriginatedCart__c = testCart.Id;
        
        Test.startTest();
        
        phss_cc_CyberSourceUtil.capturePayment(testFulfillment.Id, testAuthTransactionPayment.Id, testCaptureTransactionPayment.Id);
        
        test.stopTest();
        
    }
    
    //requestPaymentCapture(Map<String, Object> captureData)
    @isTest static void testRequestPaymentCapture(){
        
        setupTestData();
        
        String testReferenceNumber = 'testReferenceNumber';
        
        String testPaymentToken = 'testPaymentToken';
        
        Test.startTest();
        
        Map<String, Object> dataMap = phss_cc_CyberSourceUtil.buildCaptureData(testPaymentToken, testReferenceNumber, 1);
        
        try{
            phss_cc_CyberSourceUtil.requestPaymentCapture(dataMap);
        }
        catch(Exception ex){
            system.assert(ex.getMessage().containsIgnoreCase('Failed to request payment capture')); //http mock interface needs to be implemented
        }
        
        Test.stopTest();
    }

    @IsTest
    public static void testGetFormDataFromHTML() {
        String htmlString = '<html><body><form><input name=\'testInput1\' value=\'test\'/></form></body></html>';

        Dom.Document htmlDoc = new Dom.Document();
        htmlDoc.load(htmlString);

        Dom.XmlNode html = htmlDoc.getRootElement();
        Map<String, String> formElements = phss_cc_CyberSourceUtil.getFormDataFromHTML(html);

        System.assert(formElements.containsKey('testInput1'));
        System.assertEquals('test', formElements.get('testInput1'));
    }
}